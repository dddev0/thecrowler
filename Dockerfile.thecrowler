# Build stage (using golang:1.22.2)
FROM golang@sha256:d5302d40dc5fbbf38ec472d1848a9d2391a13f93293a6a5b0b87c99dc0eaa6ae AS builder
WORKDIR /app
COPY ./cmd ./cmd
COPY ./pkg ./pkg
COPY ./services ./services
COPY ./go.mod .
COPY ./go.sum .
COPY ./main.go .
COPY ./config.yaml .
COPY ./autobuild.sh .
COPY ./schemas/ ./schemas
COPY ./rules/ ./rules
RUN chmod +x autobuild.sh
RUN ./autobuild.sh

# Run stage (using alpine:3.14.2)
FROM alpine@sha256:e1c082e3d3c45cccac829840a25941e679c25d438cc8412c2fa221cf1a824e6a
WORKDIR /app

# Install necessary packages
RUN apk update && apk add ca-certificates && rm -rf /var/cache/apk/*
RUN apk add --no-cache openjdk11-jre-headless
RUN apk add --no-cache bind-tools
RUN apk add --no-cache nmap nmap-scripts

# Create a non-root user and switch to it
RUN adduser -D crowler

COPY --from=builder /app/bin/thecrowler /app/
COPY --from=builder /app/config.yaml /app/
COPY --from=builder /app/schemas /app/schemas
COPY --from=builder /app/rules /app/rules

# Ensure the executable is runnable
RUN chmod +x thecrowler

# Create the data directory and ensure correct permissions
RUN mkdir /app/data && chown -R crowler:crowler /app

USER crowler

# Expose port 8081 to the outside world
EXPOSE 8081

# Command to run the executable
CMD ["./thecrowler"]
